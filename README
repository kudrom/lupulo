0) INTRODUCTION
m3dpi_ui is a software project whose main goal is to allow a pololu robot
to communicate with humans through two main interfaces:

# Asynchronous output interface: used to push information harvested 
     in the environment by the pololu as soon as it's gathered.
# C&C interface: used to command the pololu.

m3Dpi_ui provides the necessary software to allow a web visualization 
of the data gathered by the pololu and some web controls to allow its command.

m3Dpi_ui is composed of two main subprojects:

# Backend: composed of all the software that will receive the information from 
           the pololu and will forward that information to the web page.
# Frontend: an interactive web page that will render all the information sent 
            by the backend plus the necessary controls to provide the C&C interface 
            of the pololu.

At the same time, the backend is composed of two main modules:

# Serial listener: the communication link used to send and receive information 
                   from the pololu.
# Web server: the piece of sofware used to build up the web page and update 
    it asynchornously.

1) TESTING
In order to properly test the software, the project provides several mocks of
several parts of the backend:

# Mock of pololu: an mbed program located in tests/serial_mock_mbed that sends
    a json file through the serial port at different intervals of time.
# Mock of the serial listener: a high level software mock written in python that
    publishes information to the web server whenever it's available.

The general idea is to test the serial connection between the pololu and m3dpi_ui
with the mock of the mbed software and to test the logic of the entire project
with the mock of the serial listener.

2) DATA SCHEME DESCRIPTOR
Due to the dynamic nature of the data schema used to communicate information
between the pololu and the m3dpi_ui servers, m3dpi_ui can read a data schema
defined in a format derived from json and validate and generate random data
that respects that data schema.

2) INSTALL
Run ./install.sh

3) USE
In order to run the servers you can use several configurations:
- deployment.tac -> uses a serial port specified in the settings file to
                    communicate with the web server.
- mock_serial.tac -> is a mock of the serial port which sends json random
                     data to the web server each n seconds.

You need superuser permissions to execute the deployment config file.
See the settings first before launching the server.
YOU NEED TO LAUNCH THE twistd PROGRAM FROM THE FOLDER WHICH CONTAINS THE
DIRECTORY OF THE PROJECT.
To run any of the applications you need to type:
    twistd -ny <tac_file>
To run the application in the background type:
    twistd -y <tac_file>

To run the tests, place the interpreter in the directory containing the
project and type trial m3dpi_ui.tests

Enjoy!
